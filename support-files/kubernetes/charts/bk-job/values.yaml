# Default values for bk-job.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""


## @section job image parameters
image:
  imageRegistry: ""
  imagePullSecrets: []

## @section Common parameters

## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Kubernetes cluster domain
##
clusterDomain: cluster.local
## Specifies whether a ServiceAccount should be created
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:
rbac:
  create: true

ingress:
  # enabled是指是否开启ingress
  enabled: false
  ingressClassName: ""

## @section Job common component parameters
##

## MariaDB chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/mariadb/values.yaml
##
mariadb:
  ## @param mariadb.enabled Whether to deploy a mariadb server to satisfy the applications database requirements
  ## To use an external database set this to false and configure the externalDatabase parameters
  ##
  enabled: true
  ## @param mariadb.architecture MariaDB architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone
  ## MariaDB Authentication parameters
  ##
  auth:
    ## @param mariadb.auth.rootPassword Password for the MariaDB `root` user
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: "job"
    ## @param mariadb.auth.database Database name to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: ""
    ## @param mariadb.auth.username Database user to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: job
    ## @param mariadb.auth.password Password for the database
    ##
    password: "job"
  primary:
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param mariadb.primary.persistence.enabled Enable database persistence using PVC
      ##
      enabled: true
      ## @param mariadb.primary.persistence.storageClass MariaDB primary persistent volume storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param mariadb.primary.persistence.accessModes Database Persistent Volume Access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param mariadb.primary.persistence.size Database Persistent Volume Size
      ##
      size: 10Gi
      ## @param mariadb.primary.persistence.hostPath Set path in case you want to use local host path volumes (not recommended in production)
      ##
      hostPath: ""
      ## @param mariadb.primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MariaDB primary replicas
      ##
      existingClaim: ""
  initdbScripts:
    init_root_privileges.sql: |
      grant all privileges on *.* to 'root'@'%' identified by 'job';
      grant all privileges on *.* to 'job'@'%' identified by 'job';
      flush privileges;

## External MariaDB configuration
##
externalMariaDB:
  ## @param externalMariaDB.existingPasswordSecret: Existing secret with MariaDB
  ##
  existingPasswordSecret: ""
  ## @param externalMariaDB.existingPasswordKey: Key in existingPasswordSecret, defaults to "mariadb-password"
  ##
  existingPasswordKey: ""
  ## @param externalMariaDB.host Host of the existing database
  ##
  host: ""
  ## @param externalMariaDB.port Port of the existing database
  ##
  port: 3306
  ## @param externalMariaDB.user Existing username in the existing database
  ##
  username: job
  ## @param externalMariaDB.password Password for the above username
  ##
  password: ""
  ## @param externalMariaDB.rootPassword Password for the MariaDB `root` user
  ##
  rootPassword: ""


## Redis chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  ## @param redis.enabled Whether to deploy a redis
  ## To use an external redis set this to false and configure the externalRedis parameters
  ##
  enabled: true
  ## @param redis.architecture Redis architecture. Allowed values: standalone or replication
  ##
  architecture: standalone
  master:
    persistence:
      size: 10Gi
  ## Redis Authentication parameters
  ##
  auth:
    ## @param redis.auth.enabled Enable password authentication
    ##
    enabled: true
    ## @param redis.auth.password Password for the database
    ##
    password: "job"
    ## @param redis.auth.existingSecret The name of an existing secret with Redis credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param redis.auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param redis.auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: true

## External Redis configuration
##
externalRedis:
  ## @param externalRedis.architecture  External Redis architecture. Allowed values: standalone or replication
  ##
  architecture: standalone
  ## @param externalRedis.existingPasswordSecret The name of an existing secret with Redis credentials
  ## NOTE: When it's set, the previous `externalRedis.password` parameter is ignored
  ##
  existingPasswordSecret: ""
  ## @param externalRedis.existingPasswordKey Password key to be retrieved from existing secret, defaults to "redis-password"
  ## NOTE: ignored unless `externalRedis.existingPasswordSecret` parameter is set
  ##
  existingPasswordKey: ""
  ## @param externalRedis.host: Host of the external redis
  ##
  host: ""
  ## @param externalRedis.port Port of the external redis when architecture is standalone
  ##
  port: 6379
  ## @param externalRedis.password Password of the external redis when architecture is standalone
  ##
  password: "job"
  ## @param externalRedis.sentinel Sentinel Config
  ##
  sentinel:
    ## @param externalRedis.sentinel.auth Enable password authentication on sentinels, defaults to false
    ##
    auth: false
    ## @param externalRedis.sentinel.master Redis master name, defaults to jobmaster
    master: "jobmaster"
    ## @param externalRedis.sentinel.nodes Redis sentinel nodes， for example:
    ## nodes: "job-redis1:26379,job-redis2:26379"
    ##
    nodes: ""
    ## @param externalRedis.sentinel.password Redis sentinel password
    ##
    password: ""
    ## @param externalRedis.sentinel.existingPasswordKey Redis sentinel password key, defaults to "redis-sentinel-password"
    ##
    existingPasswordKey: "redis-sentinel-password"




## RabbitMQ chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/rabbitmq/values.yaml
##
rabbitmq:
  ## @param rabbitmq.enabled Whether to deploy a RabbitMQ
  ## To use an external RabbitMQ set this to false and configure the externalRabbitMQ parameters
  ##
  enabled: true
  persistence:
    size: 10Gi
  ## RabbitMQ Authentication parameters
  ##
  auth:
    ## @param rabbitmq.auth.username RabbitMQ application username
    ##
    username: job
    ## @param rabbitmq.auth.password RabbitMQ application password
    ##
    password: "job"
    ## @param rabbitmq.auth.erlangCookie Erlang cookie to determine whether different nodes are allowed to communicate with each other	
    ##
    erlangCookie: "job"
  loadDefinition:
    enabled: true
    existingSecret: job-rabbitmq-load-definition
  extraConfiguration: |
    management.load_definitions = /app/load_definition.json

## External RabbitMQ configuration
##
externalRabbitMQ:
  ## @param externalRabbitMQ.existingPasswordSecret: Existing secret with RabbitMQ
  ##
  existingPasswordSecret: ""
  ## @param externalRabbitMQ.existingPasswordKey: Key in existingPasswordSecret, defaults to "rabbitmq-password"
  ##
  existingPasswordKey: ""
  ## @param externalRabbitMQ.host Host of the existing RabbitMQ
  ##
  host: ""
  ## @param externalRabbitMQ.port Port of the existing RabbitMQ
  ##
  port: 5672
  ## @param externalRabbitMQ.username Username
  ##
  username: "job"
  ## @param externalRabbitMQ.password Password
  ##
  password: "job"
  ## @param externalRabbitMQ.vhost vhost
  ##
  vhost: "job"


## mongodb charts Config
## ref: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
mongodb:
  # Whether to deploy mongodb
  # If you need to use an external database, set it to false and configure externalMongoDB
  enabled: true
  architecture: "standalone"
  persistence:
    size: 10Gi
  useStatefulSet: true
  auth:
    rootPassword: job
    enabled: true
    database: joblog
    username: job
    password: job
  service:
    port: 27017

## External MongoDB configuration
## If mongodb.enabled is false, use externalMongoDB
## Reference documents https://docs.mongodb.com/manual/reference/connection-string/
##
externalMongoDB:
  ## @param externalMongoDB.architecture  External MongoDB architecture. Allowed values: standalone/replicaset/shardedCluster
  ##
  architecture: ""
  ## @param externalMongoDB.existingPasswordSecret Existing secret with MongoDB
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  existingPasswordSecret: ""
  ## @param externalMongoDB.existingPasswordKey Key in existingPasswordSecret, defaults to "mongodb-password"
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  existingPasswordKey: ""
  ## @param externalMongoDB.hostsAndPorts Mongo server hosts, schema: host1[:port1][,...hostN[:portN]]. for example:
  ## hosts: "host1:27017,host2:27017"
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  hostsAndPorts: ""
  ## @param externalMongoDB.authenticationDatabase Authentication database name
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  authenticationDatabase: "admin"
  ## @param externalMongoDB.username Login user of the mongo server
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  username: ""
  ## @param externalMongoDB.password Login password of the mongo server
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  password: ""
  ## @param externalMongoDB.replicaSetName Required replica set name for the cluster
  ## NOTE: ignored when `externalMongoDB.uri` parameter is set
  ##
  replicaSetName: ""
  ## @param externalMongoDB.uri Mongo database URI, for example:
  ## Reference documents https://docs.mongodb.com/manual/reference/connection-string/
  ##
  uri: ""

## ServiceMonitor configuration
##
serviceMonitor:
  ## @param serviceMonitor.enabled Creates a ServiceMonitor to monitor kube-state-metrics
  ##
  enabled: false
  ## @param serviceMonitor.namespace Namespace in which Prometheus is running
  ## e.g:
  ## namespace: monitoring
  ##
  namespace: ""
  ## @param serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
  ##
  jobLabel: ""
  ## @param serviceMonitor.interval Scrape interval (use by default, falling back to Prometheus' default)
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ## e.g:
  ## interval: 10s
  ##
  interval: 30s
  ## @param serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ## e.g:
  ## scrapeTimeout: 10s
  ##
  scrapeTimeout: ""
  ## @param serviceMonitor.selector ServiceMonitor selector labels
  ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
  ## e.g:
  ## selector:
  ##   prometheus: my-prometheus
  ##
  selector: {}
  ## @param serviceMonitor.honorLabels Honor metrics labels
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ## e.g:
  ## honorLabels: false
  ##
  honorLabels: false
  ## @param serviceMonitor.relabelings ServiceMonitor relabelings
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  ##
  relabelings: []
  ## @param serviceMonitor.metricRelabelings ServiceMonitor metricRelabelings
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  ##
  metricRelabelings: []

nginx-ingress-controller:
  enabled: false

## @section job application common parameters
##
app:
  ## job app_code. Fixed Value
  code: bk_job
  ## job app_secret
  secret: ""

## BlueKing ESB Config
esb:
  service:
    ## ESB Service URL
    url: "http://paas.example.com"

## BlueKing GSE Config
gse:
  ## @param gse.existingTlsSecret: Existing secret name with GSE certificate
  ##
  existingTlsSecret: ""
  cacheApiServer:
    host: "gse-api.example.com"
    port: 59313
  ssl:
    keystore:
      ## @param gse.ssl.keystore.password: Password for gse keystore. Task effect when gse.existingTlsSecret is not set.
      ##
      password: "2y#8VI2B4Sm9Dk^J"
    truststore:
      ## @param gse.ssl.truststore.password: Password for gse truststore. Task effect when gse.existingTlsSecret is not set.
      ##
      password: "2y#8VI2B4Sm9Dk^J"
  taskserver:
    host: "gse-task.example.com"
    port: 48673
  server:
    discovery:
      type: zookeeper
    zookeeper:
      connect:
        string: "gse-zk.example.com"
  script:
    ## @param gse.script.rootPath The root directory of the script file distributed by the JOB to the GSE agent
    ##
    rootPath: "/tmp/bkjob"
  query:
    threads:
      num: 5
    batchSize: 5000

## BlueKing IAM Config
iam:
  baseUrl: "http://bkiam.example.com"
  ## The system ID of Job in the IAM. Fixed Value
  systemId: bk_job

## BlueKing PaaS Config
paas:
  login:
    # 蓝鲸PaaS的登录地址
    url: "http://paas.example.com/login"

## BlueKing CMDB Config
cmdb:
  app:
    index:
      # CMDB首页URI
      path: /#/business/{appId}/index
  interface:
    briefCacheTopo:
      # 是否启用CMDB拓扑缓存接口，默认开启
      enabled: true
    findHostRelation:
      longTerm:
        # 主机数量超过1w的大业务从CMDB查询主机的最大并发数量，默认为10
        concurrency: 10
    flowControl:
      default:
        # CMDB接口资源默认流控频率，默认为50次/s
        limit: 50
      # 是否开启CMDB接口资源流控，默认不开启
      enabled: false
    retry:
      # CMDB接口资源调用时是否开启重试，默认开启
      enabled: true
  query:
    threads:
      # 普通业务从CMDB查询主机的线程数量
      num: 20
  server:
    # CMDB根地址
    url: http://cmdb.example.com

## BlueKing NodeMan Config
nodeman:
  server:
    # 节点管理根地址
    url: http://nodeman.example.com
## BlueKing Artifactory Config
artifactory:
  # 制品库根地址
  baseUrl: http://bkrepo.example.com
  admin:
    # 制品库admin账号
    username: admin
    # 制品库admin账号的密码
    password: blueking
  job:
    # 作业平台在制品库的官方账号，初始化时由作业平台通过Admin账号自动创建
    username: bkjob
    # 作业平台在制品库的官方账号对应的密码，初始化时由作业平台通过Admin账号自动创建
    password: bkjob
    # 作业平台在制品库的官方项目，初始化时由作业平台通过Admin账号自动创建
    project: bkjob

## Job LocalFile Config
localFile:
  # 本地文件存储后端，取值可为：制品库（artifactory）、本地NFS（local）
  storageBackend: artifactory
  artifactory:
    download:
      # 从制品库下载本地文件的并发数，默认为10
      concurrency: 10
    # 制品库中作业平台使用的本地文件仓库代码，初始化时由作业平台通过Admin账号自动创建
    repo: localupload

## Swagger Doc
swagger:
  # 开启开发模式时的Swagger文档地址域名
  url: "swagger.job.com"

## Job Common Config
job:
  # 作业平台运行所有环境(prod,dev)与模式(kubernetes)，默认生产环境(prod)、K8s容器模式(kubernetes)
  profile: prod,kubernetes
  # 作业平台版本(ce,ee)，默认社区版(ce)
  edition: ce
  security:
    # base64编码的服务间调用私钥
    privateKeyBase64: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ0NERlU0REcrQzhFS2N1ZmpLbGxiYlljVHYzOHlBVE9PRmlBNHJlRlNVa2l4SzZPSjE1Vy8zdGpWY3NYVDRrWU8wTGhGZ1huNU5kM3UxSUZlWnIxM1NQTWpZazRNb0FmYWFhaTdWYTV3a2F0UXM0NnZ6MkwrZXhrU0F1VnV6bU8rS2wxTUVlcktxNnhrTG9SM3UwaktxamdsREMyUDBCUVFuUzljRVpOM3VMTGtLa29rWW1RVkQ0ZTNQam1YdjdSL3hZb3lyTnRLdXRJVWJBd0l4dEZCd2kzSkZaNmN0WkdKN2VreS9JYnV0TXgzUTlobmF4UmJPQkpRYTZvZmU1cUlZKy9FeGs2RW16MFQ2OGhsVnRRaGUvLzNCSjduSDNDR0JYemt3VlE3V1Q4U1RCZzdXTnRwb0pSWVpFYTJWK0ptdGRQcDJIOWo2aDZraFlGelBSWUZSQWdNQkFBRUNnZ0VBU0ZqcUU4cy9RZjI5WVFsSXNoTmU4Sjc4ZTJIcWw3bXVuWHVxUGw2cjF4ZFdrcm5xT2lKUTN1SzczdnhPRVhhS2FYTnpjVVJBU1lKZURNNllUVVExRXArRU1KQW4xOXIzd01Hdm1rVktVU3dwSzJ2aEhrQUhvaUcwdkZQaUF4RGl1aHdqTUF1K1Y3MkFhbXJRaHlyaXl1VkhtOGU3YkdaYUFDNTl5TkVBY2Q0ZDU1SjZkd3lvQWpUNzRuaVNZMlozS1laakhJbzVXaTZyaE0zc3hOMzZVK3cxZ012SUpJc01GcXJHMElWanl3ZjRLQkQwYmdlV29ZY0NTUnd3UVJpN094SHVKMjFtZk4xb3hzbEJLcjE5UHc2MTQ1OFpEYWZvc0lUSWR5bXJWSndmYTAwaGNxaUdpOVdGbXMwaUloemJrZjlKZWRnY3FBMkkxc0g0NkRVb0FRS0JnUURFV0lkV1RVSHVNRnA2RWh6R3pxNk5hb2V6RlhiNDNEOWI5OGZRL0RCV2Q3cmV0d3psbWQyejZGVFJlbE0zaVFnUnN5UWZPQU13SDluaEIzeVZsL1lBNHAwcDE4MGVuanRjNmtmd25rQy9TbGV1ckxIZXhXeVpzNW1KaTNZSWtLL2Z3OFQyQlBXbmVXNVpzNlcrbXNLZUtUYjJ4amNTS3BWREVYUGJFa0hyMFFLQmdRQ3BqMGIxZUpqVGFRUllLNG9DTU1xT3lwYVlmUVJjZWhkQmovaXVBeDNLT2RFYlp4U3VZSUdFUWZpR3BFT0R3SXdzOU1rSmZsbXlOUXdHQldQVyszR245aVpSQ3A0QXdqbkhxb2RLU1c5NEFJcDVmT3VzU0ZmRVd0NGZFQnhsajFrYUdiYmZLL0lYb3hWMkI5VXVOMG1oa0dYSjBrTUR0MlFiWklIWUg2Y2RnUUtCZ0VjQkROQTAyQ2JlN1prL2U1Q1pwWjRXYkVSaStzYzhQdDF2V1o5RjArVXhIeTd6VzRLY2hnUk5mSDdVa2N0L2pwOTMvUlFkR1dvSjJxejZIQitzK0pXUlhleUgwZkhFbndzVzNqVXh4WkJudmhXNDlnbnRzenhTS3JBRzh3UmQ3bndwTzgwTU5obitXOTJzamIvRUQ2Vktta25ibkliQlI0RWRpcHdxbWhSQkFvR0FVd21PeDZJeXZiMzlXYXlnM3FmRVd4K05sc29LdTdzeTduR3lhSTJ3Smh3Z2N0b05mOFJWU1U4QmhmYWw5Ynp6S1FVTCt6RThmaENLZmR4ZjQ2V3FLSVpjaDIyNnFVWjFBM3BZM1NHUGpHWS9hbldwK09wSXlTbHpCQ1Znc3IvNzg5TktBb3REK1IxdDRpcTkxTzlRaU9YdFkyUXNXNEtSYlBUUXZlWHFjb0VDZ1lFQXRnTmFLeWE0Y1c3ODhqbjNlRFkrYkhlTmpaVlJOUk1LZzJpMUNzSEhOUExheXRxVGFmTXVTR0JZMWN6SGhGelRpdWZPVURVQkVzME0xaDU1UlZKM2ZIRlVsR2cyQ3JHeWRtYkFxOXRMcE84Wlhac3V5UCtNSndseGZCeDZzZVRML1pSOUVxNG1PekRXdFVrNVdGa2k1VUpTN3p6ellGenVMTTFsZHlGdG9PZz0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ=="
    # base64编码的服务间调用公钥
    publicKeyBase64: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFnZ3hWT0F4dmd2QkNuTG40eXBaVzIySEU3OS9NZ0V6amhZZ09LM2hVbEpJc1N1amlkZVZ2OTdZMVhMRjArSkdEdEM0UllGNStUWGQ3dFNCWG1hOWQwanpJMkpPREtBSDJtbW91MVd1Y0pHclVMT09yODlpL25zWkVnTGxiczVqdmlwZFRCSHF5cXVzWkM2RWQ3dEl5cW80SlF3dGo5QVVFSjB2WEJHVGQ3aXk1Q3BLSkdKa0ZRK0h0ejQ1bDcrMGY4V0tNcXpiU3JyU0ZHd01DTWJSUWNJdHlSV2VuTFdSaWUzcE12eUc3clRNZDBQWVoyc1VXemdTVUd1cUgzdWFpR1B2eE1aT2hKczlFK3ZJWlZiVUlYdi85d1NlNXg5d2hnVjg1TUZVTzFrL0Vrd1lPMWpiYWFDVVdHUkd0bGZpWnJYVDZkaC9ZK29lcElXQmN6MFdCVVFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t"
    actuator:
      user:
        # 获取actuator监控数据的账号，部署时生成填入
        name: actuator_name
        # 获取actuator监控数据的密码，部署时生成填入
        password: actuator_password
  encrypt:
    # 用于加密作业平台中存储的数据库密码的密码
    password: "job#2021"
  feature:
    toggle:
      fileManage:
        # 是否开启文件管理特性，默认不开启
        enabled: true
  storage:
    # 存储文件（用户上传的本地文件、导入导出生成的临时文件等）到本地的根路径
    rootPath: /data/job/local
  migration:
    iamModel:
      # 是否开启权限模型migration
      enabled: true
    mysqlSchema:
      # 是否开启Mysql数据库结构migration
      enabled: true
  # 各微服务Actuator监控端口
  managePort: 19876
  # 存储分配
  pv:
    # 节点机器上用于挂载到容器内作为存储空间的路径
    path: "/data/bkjob"
    # 分配的存储空间大小，默认100G
    storage: 100Gi
  web:
    # 作业平台主站域名
    domain: "job.example.com"
    # 作业平台API域名
    apiDomain: "jobapi.example.com"
    https:
      # 是否开启HTTPS
      enabled: false
      # 开启HTTPS时使用的证书base64编码
      certBase64: ""
      # 开启HTTPS时使用的证书私钥base64编码
      keyBase64: ""

## 蓝鲸日志采集
##
bkLogConfig:
  # 是否开启蓝鲸日志采集
  enabled: false
  file:
    serviceLog:
      # 微服务日志采集到的dataId
      # e.g: dataId: 1
      dataId: ""
    accessLog:
      # job-gateway网关access日志采集到的dataId
      # e.g: dataId: 2
      dataId: ""
  std:
    # 容器标准输出日志采集到的dataId
    # e.g: dataId: 3
    dataId: ""

## @section job-gateway parameters
gatewayConfig:
  loginExemption:
    # 是否开启登录豁免，默认不开启
    enabled: false
    # 开启登录豁免时使用的默认用户名
    defaultUser: admin
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-gateway
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  # 容器内的端口号
  containerPort:
    # https端口号
    https: 19802
    # http端口号
    http: 9802
    # 管理端口号
    management: 19876
  service:
    type: ClusterIP
    # 暴露出的Service端口号
    port:
      # https端口号
      https: 443
      # http端口号
      http: 80
  ingress:
    # 是否开启ingress
    enabled: true
    path: "/"
    pathType: ImplementationSpecific
    annotations:
      kubernetes.io/ingress.class: nginx
      # 开启ingress后的最大请求体大小
      nginx.ingress.kubernetes.io/proxy-body-size: "10240m"
    extraHosts: []
    tls: []
    extraTls: []
    secrets: []
  server:
    ssl:
      keystore:
        # job-gateway开启https时使用的keystore的密码
        password: "mLnuob1**4D74c@F"
      truststore:
        # job-gateway开启https时使用的truststore的密码
        password: "mLnuob1**4D74c@F"
  # 运行时JVM参数
  jvmOptions: "-Dreactor.netty.http.server.accessLogEnabled=true -Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8 -XX:+UseG1GC"

## @section job-manage parameters
manageConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-manage
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19803
  service:
    port: 80
    type: ClusterIP
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"


## @section job-execute parameters
executeConfig:
  # 执行日志导出配置
  logExport:
    # 存储后端（artifactory,local），制品库（artifactory）或本地NFS（local），默认制品库
    storageBackend: artifactory
    artifactory:
      # 存储后端使用制品库时使用的仓库代码
      repo: backup
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-execute
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19804
  service:
    type: ClusterIP
    port: 80
  # 运行时JVM参数
  jvmOptions: "-Xms512m -Xmx512m -XX:NewRatio=1 -XX:SurvivorRatio=8"


## @section job-crontab parameters
crontabConfig:
  # 是否部署定时任务微服务，默认部署
  enabled: true
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-crontab
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  # 连续启动失败通知策略：默认 从第一次失败开始，连续失败每5次通知第一次 begin = 1；frequency = 5；totalTimes = -1
  notificationPolicy:
    failed:
      start:
        # 通知开始：默认 1 - 从第一次失败开始通知
        begin: 1
        # 通知频率：默认 5 - 每5次通知， 1 - 每次通知
        frequency: 5
        # 通知次数：默认 -1 - 不限制通知次数， 0 - 不通知， 1 - 只通知1次，
        total: -1
  containerPort: 19805
  service:
    port: 80
    type: ClusterIP
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"

## @section job-logsvr parameters
logsvrConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-logsvr
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19806
  service:
    port: 80
    type: ClusterIP
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"

## @section job-backup parameters
backupConfig:
  # 存储后端（artifactory,local），制品库（artifactory）或本地NFS（local），默认制品库
  storageBackend: artifactory
  artifactory:
    # 存储后端使用制品库时使用的备份服务仓库代码
    repo: backup
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-backup
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19808
  service:
    port: 80
    type: ClusterIP
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"

## @section job-analysis parameters
analysisConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-analysis
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19807
  service:
    port: 80
    type: ClusterIP
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"

## @section job-file-gateway parameters
fileGatewayConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-file-gateway
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19809
  service:
    port: 80
    type: ClusterIP
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"

## @section job-analysis parameters
fileWorkerConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-file-worker
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19810
  service:
    port: 80
    type: ClusterIP
  swaggerUrl: ""
  # 实例名称
  instanceName: job-file-worker-public-1
  # 版本号
  version: 0.0.1
  # 安全凭据
  token: "testToken"
  # 所属业务Id
  appId: -1
  # 能力标签
  abilityTags: FILE_SOURCE_TYPE_CODE=TENCENT_CLOUD_COS
  # 外部如何访问file-worker相关配置
  access:
    # 端口号
    port: 19810
  # file-worker所在节点机器的云区域ID
  cloudAreaId: 0
  # 文件下载相关配置
  downloadFile:
    # 文件下载路径
    dir: /tmp/job
    # 下载的文件过期时间
    expireDays: 7
  # 运行时JVM参数
  jvmOptions: "-Xms256m -Xmx256m -XX:NewRatio=1 -XX:SurvivorRatio=8"

## @section job-frontend parameters
frontendConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-frontend
    tag: 3.4.4-beta.8
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    path: "/"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: "2048m"
    extraHosts: []
    tls: []
    extraTls: []
    secrets: []

migration:
  image:
    # 镜像拉取仓库根地址
    registry: "mirrors.tencent.com"
    # 镜像拉取仓库组织与镜像名称
    repository: "bkce/job-migration"
    # 镜像标签
    tag: 3.4.4-beta.8
    # 镜像拉取策略
    pullPolicy: IfNotPresent
