# Default values for bk-job.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters

## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Kubernetes cluster domain
##
clusterDomain: cluster.local
## Specifies whether a ServiceAccount should be created
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:
rbac:
  create: true

ingress:
  enabled: false

## @section Job common component parameters
##

## MariaDB chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/mariadb/values.yaml
##
mariadb:
  ## @param mariadb.enabled Whether to deploy a mariadb server to satisfy the applications database requirements
  ## To use an external database set this to false and configure the externalDatabase parameters
  ##
  enabled: true
  ## @param mariadb.architecture MariaDB architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone
  ## MariaDB Authentication parameters
  ##
  auth:
    ## @param mariadb.auth.rootPassword Password for the MariaDB `root` user
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: "job"
    ## @param mariadb.auth.database Database name to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: job_crontab
    ## @param mariadb.auth.username Database user to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: job
    ## @param mariadb.auth.password Password for the database
    ##
    password: "job"
  primary:
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param mariadb.primary.persistence.enabled Enable database persistence using PVC
      ##
      enabled: true
      ## @param mariadb.primary.persistence.storageClass MariaDB primary persistent volume storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param mariadb.primary.persistence.accessModes Database Persistent Volume Access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param mariadb.primary.persistence.size Database Persistent Volume Size
      ##
      size: 8Gi
      ## @param mariadb.primary.persistence.hostPath Set path in case you want to use local host path volumes (not recommended in production)
      ##
      hostPath: ""
      ## @param mariadb.primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MariaDB primary replicas
      ##
      existingClaim: ""
  initdbScripts:
    init_root_privileges.sql: |
      grant all privileges on *.* to 'root'@'%' identified by 'job';
      flush privileges;

## External MariaDB configuration
##
externalMariaDB:
  ## @param externalMariaDB.existingPasswordSecret: Existing secret with MariaDB
  ##
  existingPasswordSecret: ""
  ## @param externalMariaDB.existingPasswordKey: Key in existingPasswordSecret, defaults to "mariadb-password"
  ##
  existingPasswordKey: ""
  ## @param externalMariaDB.host Host of the existing database
  ##
  host: ""
  ## @param externalMariaDB.port Port of the existing database
  ##
  port: 3306
  ## @param externalMariaDB.user Existing username in the existing database
  ##
  username: job
  ## @param externalMariaDB.password Password for the above username
  ##
  password: ""


## Redis chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  ## @param redis.enabled Whether to deploy a redis
  ## To use an external redis set this to false and configure the externalRedis parameters
  ##
  enabled: true
  ## @param redis.architecture Redis architecture. Allowed values: standalone or replication
  ##
  architecture: standalone
  ## Redis Authentication parameters
  ##
  auth:
    ## @param redis.auth.enabled Enable password authentication
    ##
    enabled: true
    ## @param redis.auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: true
    ## @param redis.auth.password Password for the database
    ##
    password: "job"
    ## @param redis.auth.existingSecret The name of an existing secret with Redis&trade; credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param redis.auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##

## External Redis configuration
##
externalRedis:
  ## @param externalRedis.existingPasswordSecret: Existing secret with Redis
  ##
  existingPasswordSecret: ""
  ## @param externalRedis.existingPasswordKey: Key in existingPasswordSecret, defaults to "redis-password"
  ##
  existingPasswordKey: ""
  ## @param externalRedis.host Host of the existing redis
  ##
  host: ""
  ## @param externalRedis.port Port of the existing redis
  ##
  port: 6379
  ## @param externalRedis.password Password
  ##
  password: "job"


## RabbitMQ chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/rabbitmq/values.yaml
##
rabbitmq:
  ## @param rabbitmq.enabled Whether to deploy a RabbitMQ
  ## To use an external RabbitMQ set this to false and configure the externalRabbitMQ parameters
  ##
  enabled: true
  ## RabbitMQ Authentication parameters
  ##
  auth:
    ## @param rabbitmq.auth.username RabbitMQ application username
    ##
    username: job
    ## @param rabbitmq.auth.password RabbitMQ application password
    ##
    password: "job"
    ## @param rabbitmq.auth.erlangCookie Erlang cookie to determine whether different nodes are allowed to communicate with each other	
    ##
    erlangCookie: "job"
  extraSecrets:
    load-definition:
      load_definition.json: |
        {
          "vhosts": [
            {
              "name": "job"
            }
          ]
        }
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    management.load_definitions = /app/load_definition.json

## External RabbitMQ configuration
##
externalRabbitMQ:
  ## @param externalRabbitMQ.existingPasswordSecret: Existing secret with RabbitMQ
  ##
  existingPasswordSecret: ""
  ## @param externalRabbitMQ.existingPasswordKey: Key in existingPasswordSecret, defaults to "rabbitmq-password"
  ##
  existingPasswordKey: ""
  ## @param externalRabbitMQ.host Host of the existing RabbitMQ
  ##
  host: ""
  ## @param externalRabbitMQ.port Port of the existing RabbitMQ
  ##
  port: 5672
  ## @param externalRabbitMQ.username Username
  ##
  username: "job"
  ## @param externalRabbitMQ.password Password
  ##
  password: "job"


## mongodb charts Config
## ref: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
mongodb:
  # Whether to deploy mongodb
  # If you need to use an external database, set it to false and configure externalMongoDB
  enabled: true
  auth:
    enabled: true
    database: joblog
    username: job
    password: job

## If mongodb.enabled is false, use externalMongoDB
externalMongoDB:
  ## @param externalMongoDB.existingPasswordSecret: Existing secret with MongoDB
  ##
  existingPasswordSecret: ""
  ## @param externalMongoDB.existingPasswordKey: Key in existingPasswordSecret, defaults to "mongodb-password"
  ##
  existingPasswordKey: ""
  host: ""
  port: 27017
  database: joblog
  username: ""
  password: ""

nginx-ingress-controller:
  enabled: false

## @section job application common parameters
##
app:
  ## job app_code. Fixed Value
  code: bk_job
  ## job app_secret
  secret: ""
## Blueking ESB Config
esb:
  service:
    ## ESB Service URL
    url: "http://paas.service.consul:80"
  publicKeyBase64: ""
## Blueking GSE Config
gse:
  cacheApiServer:
    host: "gse-api.service.consul"
    port: 59313
  ssl:
    keystore:
      password: ""
      path: /data/job/cert/gse_job_api_client.keystore
    truststore:
      password: ""
      path: /data/job/cert/gse_job_api_client.truststore
  taskserver:
    host: "gse-task.service.consul"
    port: 48673
  server:
    discovery:
      type: zookeeper
    zookeeper:
      connect:
        string: "zk.service.consul:2181"
## Blueking IAM Config
iam:
  baseUrl: "http://bkiam.service.consul:5001"
  ## The system ID of Job in the IAM. Fixed Value
  systemId: bk_job
license:
  file: /data/job/cert/platform.cert
  service:
    url: ""
paas:
  login:
    url: "http://paas.com/login"
## CMDB Config
cmdb:
  app:
    index:
      path: /#/business/{appId}/index
  interface:
    briefCacheTopo:
      enable: false
    findHostRelation:
      longTerm:
        concurrency: 11
    flowControl:
      default:
        limit: 500
      enable: true
      precision: 1
      resources: get_biz_brief_cache_topo:1500
    retry:
      enable: true
  query:
    threads:
      num: 50
  server:
    url: ""
## Artifactory Config
artifactory:
  enable: true
  base.url: ""
  job:
    username: ""
    password: ""
    local-upload:
      root-path: ""
## Swagger Doc
swagger:
  url: ""
## Job Common Config
job:
  profile: prod
  edition: ce
  security:
    privateKeyBase64: ""
    publicKeyBase64: ""
    actuator:
      user:
        name: actuator_name
        password: actuator_password
  encrypt:
    password: "encrypt_password"
  feature:
    toggle:
      fileManage:
        enabled: true
  storage:
    rootPath: /data/job/nfs

## @section job-gateway parameters
gatewayConfig:
  loginExemption:
    enable: true
    defaultUser: admin
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-gateway
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort:
    https: 19802
    http: 9802
    management: 19876
  service:
    type: ClusterIP
    port:
      https: 443
      http: 80
  ingress:
    enabled: true
    hostname: "api.bk-job.com"
    path: "/"
    pathType: ImplementationSpecific
    annotations:
      kubernetes.io/ingress.class: nginx
    extraHosts: []
    tls: []
    extraTls: []
    secrets: []
  server:
    ssl:
      keystore:
        password: ""
      truststore:
        password: ""

## @section job-manage parameters
manageConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-manage
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19803
  service:
    port: 80
    type: ClusterIP


## @section job-execute parameters
executeConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-execute
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19804
  service:
    type: ClusterIP
    port: 80


## @section job-crontab parameters
crontabConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-crontab
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19805
  service:
    port: 80
    type: ClusterIP

## @section job-logsvr parameters
logsvrConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-logsvr
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19806
  service:
    port: 80
    type: ClusterIP

## @section job-backup parameters
backupConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-backup
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19808
  service:
    port: 80
    type: ClusterIP

## @section job-analysis parameters
analysisConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-analysis
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19807
  service:
    port: 80
    type: ClusterIP

## @section job-file-gateway parameters
fileGatewayConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-file-gateway
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19809
  service:
    port: 80
    type: ClusterIP

## @section job-analysis parameters
fileWorkerConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-file-worker
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  containerPort: 19810
  service:
    port: 80
    type: ClusterIP
  fileGateway:
    api:
      rootUrl: ""
  swaggerUrl: ""
  instanceName: job-file-worker-public-1
  version: 0.0.1
  id: 17
  token: "testToken"
  appId: 2
  abilityTags: FILE_SOURCE_TYPE_CODE=TENCENT_CLOUD_COS
  access:
    port: 19810
  cloudAreaId: 0
  downloadFile:
    dir: /tmp/job
    expireDays: 7

## @section job-frontend parameters
frontendConfig:
  image:
    registry: mirrors.tencent.com
    repository: bkce/job-frontend
    tag: 3.4.0
    pullPolicy: Always
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 50
    targetMemory: 50
  service:
    type: ClusterIP
    port: 80
  web:
    scheme: "http"
    domain: "bk-job.com"
  backend:
    apiGateway:
      scheme: "http"
      domain: "api.bk-job.com"
  ingress:
    enabled: true
    hostname: "bk-job.com"
    pathType: ImplementationSpecific
    path: "/"
    annotations:
      kubernetes.io/ingress.class: nginx
    extraHosts: []
    tls: []
    extraTls: []
    secrets: []

migration:
  image:
    registry: "mirrors.tencent.com"
    repository: "bkce/job-migration"
    tag: 3.4.0
    pullPolicy: Always
